# -*- coding: utf-8 -*-
"""TGClassDistribution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Fz-wQOiq6VeRI30Ai2G3DYDI1mEVexD
"""

import matplotlib.pyplot as plt

number_of_classes_offered = [20, 3, 4, 2, 3, 3, 2, 2, 2, 2, 2, 4, 3, 2, 1, 1, 3, 2]
names_of_classes_offered = ["Privates", "Juniors (Ages 4-6)", "Ball Mastery Beginners Youngers (Ages 7-11)", "Ball Mastery Intermediate Youngers (Ages 8-11)", "Beginners Youngers (Ages 7-11)", "Beginners Olders (Ages 12-17)", "Intermediate Youngers (Ages 8-11)", "Advanced Youngers (Ages 8-11)", "Advanced Youngers/Intermediate Olders","Advanced/Intermediate Olders (Ages 12-17)", "Advanced Olders (Ages 12-17)", "Shooting/Finishing Beginners Youngers (Ages 7-11)", "Shooting/Finishing Intermediate Youngers (Ages 8-11)", "Shooting/Finishing Beginners Olders (Ages 12-17)", "Shooting Intermediate/Advanced Olders (Ages 12-17)", "Juniors Shooting (Ages 4-6)", "Mastering Defense Youngers (Ages 7-11)", "Mastering Defense Olders (Ages 12-17)"]

sorted_data = sorted(zip(number_of_classes_offered, names_of_classes_offered))
sorted_numbers, sorted_names = zip(*sorted_data)

plt.barh(sorted_names, sorted_numbers, color = 'green')
plt.xlabel('Number of Classes Offered')
plt.ylabel('Names of Classes Offered')
plt.title('Number of Classes Offered (New Class Schedule)')
plt.show()
print("\n")

plt.figure(figsize=(10, 8))
plt.pie(sorted_numbers, labels=sorted_names, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 6}, labeldistance = 1.1)
plt.title('Proportion of Classes Offered (New Class Schedule)')
plt.show()
print("\n")

categories = {"Private": 0, "Olders": 0, "Youngers": 0, "Junior": 0}
for name, count in zip(names_of_classes_offered, number_of_classes_offered):
    if "Private" in name:
        categories["Private"] += count
    if "Older" in name:
        categories["Olders"] += count
    if "Younger" in name:
        categories["Youngers"] += count
    if "Junior" in name:
        categories["Junior"] += count

plt.figure(figsize=(8, 8))
plt.pie(categories.values(), labels=categories.keys(), autopct='%1.1f%%', colors=["red", "blue", "green", "orange"], startangle=140)
plt.title("Distribution of Classes by Age (NEW SCHEDULE)")
plt.show()
print("\n")

categories2 = {"Junior": 0, "Beginner": 0, "Private": 0, "Intermediate": 0, "Advanced": 0}

for name, count in zip(names_of_classes_offered, number_of_classes_offered):
    if "Junior" in name:
        categories2["Junior"] += count
    if "Beginner" in name or "Beginners" in name:
        categories2["Beginner"] += count
    if "Private" in name:
        categories2["Private"] += count
    if "Intermediate" in name:
        categories2["Intermediate"] += count
    if "Advance" in name or "Advanced" in name:
        categories2["Advanced"] += count

plt.figure(figsize=(8, 8))
plt.pie(categories2.values(), labels=categories2.keys(), autopct='%1.1f%%', colors=["red", "blue", "green", "orange", "purple"], startangle=140)
plt.title("Distribution of Classes by Level (NEW SCHEDULE)")
plt.show()

import matplotlib.pyplot as plt

number_of_classes_offered = [4, 14, 4, 4, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 2, 2, 3, 3]
names_of_classes_offered = ["Shooting/Finishing Beginners youngers(7-11 yrs old)", "Private", "Ball Mastery Beginners Younger(7-11 yrs old)", "Juniors (4-6 yrs old)", "Intermediate Youngers (8-11 yrs old)", "Beginners Olders (12-17 yrs old)", "Shooting/Finishing Intermediate Youngers (8-11 yrs old)", "Advanced/Intermediate Olders (12-17 yrs old)", "Shooting Intermediate/Advanced Olders (12-17 yrs old)", "Beginner Youngers (7-11 yrs old)", "Mastering Defense Youngers (7-11 yrs old)", "Mastering Defense Olders (12-17 yrs old)", "Shooting/Finishing Beginners Older (12-17 yrs old)", "Ball Mastery Intermediate Younger(8-11 yrs old)", "Juniors Shooting (4-6 yrs old)", "Advance Youngers/Intermediate Olders", "Advance Olders (12-17 yrs old)", "Advanced Youngers (8-11 yrs old)"]

sorted_data = sorted(zip(number_of_classes_offered, names_of_classes_offered))
sorted_numbers, sorted_names = zip(*sorted_data)

plt.barh(sorted_names, sorted_numbers, color = 'green')
plt.xlabel('Number of Classes Offered')
plt.ylabel('Names of Classes Offered')
plt.title('Number of Classes Offered (OLD Class Schedule)')
plt.show()
print("\n")

plt.figure(figsize=(10, 8))
plt.pie(sorted_numbers, labels=sorted_names, autopct='%1.1f%%', startangle=90, textprops={'fontsize': 6}, labeldistance = 1.1)
plt.title('Proportion of Classes Offered (OLD SCHEDULE)')
plt.show()
print("\n")

categories = {"Private": 0, "Olders": 0, "Youngers": 0, "Junior": 0}
for name, count in zip(names_of_classes_offered, number_of_classes_offered):
    if "Private" in name:
        categories["Private"] += count
    if "Older" in name:
        categories["Olders"] += count
    if "Younger" in name:
        categories["Youngers"] += count
    if "Junior" in name:
        categories["Junior"] += count

plt.figure(figsize=(8, 8))
plt.pie(categories.values(), labels=categories.keys(), autopct='%1.1f%%', colors=["red", "blue", "green", "orange"], startangle=140)
plt.title("Distribution of Classes by Age (OLD SCHEDULE)")
plt.show()
print("\n")

categories2 = {"Junior": 0, "Beginner": 0, "Private": 0, "Intermediate": 0, "Advanced": 0}

for name, count in zip(names_of_classes_offered, number_of_classes_offered):
    if "Junior" in name:
        categories2["Junior"] += count
    if "Beginner" in name or "Beginners" in name:
        categories2["Beginner"] += count
    if "Private" in name:
        categories2["Private"] += count
    if "Intermediate" in name:
        categories2["Intermediate"] += count
    if "Advance" in name or "Advanced" in name:
        categories2["Advanced"] += count

plt.figure(figsize=(8, 8))
plt.pie(categories2.values(), labels=categories2.keys(), autopct='%1.1f%%', colors=["red", "blue", "green", "orange", "purple"], startangle=140)
plt.title("Distribution of Classes by Level (OLD SCHEDULE)")
plt.show()

import matplotlib.pyplot as plt
import numpy as np

number_of_classes_offered = [20, 3, 4, 2, 3, 3, 2, 2, 2, 2, 2, 4, 3, 2, 1, 1, 3, 2]
names_of_classes_offered = ["Privates", "Juniors (Ages 4-6)", "Ball Mastery Beginners Youngers (Ages 7-11)", "Ball Mastery Intermediate Youngers (Ages 8-11)", "Beginners Youngers (Ages 7-11)", "Beginners Olders (Ages 12-17)", "Intermediate Youngers (Ages 8-11)", "Advanced Youngers (Ages 8-11)", "Advanced Youngers/Intermediate Olders","Advanced/Intermediate Olders (Ages 12-17)", "Advanced Olders (Ages 12-17)", "Shooting/Finishing Beginners Youngers (Ages 7-11)", "Shooting/Finishing Intermediate Youngers (Ages 8-11)", "Shooting/Finishing Beginners Olders (Ages 12-17)", "Shooting Intermediate/Advanced Olders (Ages 12-17)", "Juniors Shooting (Ages 4-6)", "Mastering Defense Youngers (Ages 7-11)", "Mastering Defense Olders (Ages 12-17)"]

sorted_data = sorted(zip(number_of_classes_offered, names_of_classes_offered))
sorted_numbers, sorted_names = zip(*sorted_data)

plt.barh(sorted_names, sorted_numbers, color = 'green')
plt.xlabel('Number of Classes Offered')
plt.ylabel('Names of Classes Offered')
plt.title('Number of Classes Offered (New Class Schedule)')
plt.show()
print("\n")

number_of_classes_offered2 = [4, 14, 4, 4, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 2, 2, 3, 3]
names_of_classes_offered2 = ["Shooting/Finishing Beginners youngers(7-11 yrs old)", "Private", "Ball Mastery Beginners Younger(7-11 yrs old)", "Juniors (4-6 yrs old)", "Intermediate Youngers (8-11 yrs old)", "Beginners Olders (12-17 yrs old)", "Shooting/Finishing Intermediate Youngers (8-11 yrs old)", "Advanced/Intermediate Olders (12-17 yrs old)", "Shooting Intermediate/Advanced Olders (12-17 yrs old)", "Beginner Youngers (7-11 yrs old)", "Mastering Defense Youngers (7-11 yrs old)", "Mastering Defense Olders (12-17 yrs old)", "Shooting/Finishing Beginners Older (12-17 yrs old)", "Ball Mastery Intermediate Younger(8-11 yrs old)", "Juniors Shooting (4-6 yrs old)", "Advance Youngers/Intermediate Olders", "Advance Olders (12-17 yrs old)", "Advanced Youngers (8-11 yrs old)"]

sorted_data2 = sorted(zip(number_of_classes_offered2, names_of_classes_offered2))
sorted_numbers2, sorted_names2 = zip(*sorted_data2)

plt.barh(sorted_names2, sorted_numbers2, color = 'green')
plt.xlabel('Number of Classes Offered')
plt.ylabel('Names of Classes Offered')
plt.title('Number of Classes Offered (OLD Class Schedule)')
plt.show()
print("\n")

class_name_mapping = {
    "Privates": "Private",
    "Juniors (Ages 4-6)": "Juniors (4-6 yrs old)",
    "Ball Mastery Beginners Youngers (Ages 7-11)": "Ball Mastery Beginners Younger(7-11 yrs old)",
    "Ball Mastery Intermediate Youngers (Ages 8-11)": "Ball Mastery Intermediate Younger(8-11 yrs old)",
    "Beginners Youngers (Ages 7-11)": "Beginner Youngers (7-11 yrs old)",
    "Beginners Olders (Ages 12-17)": "Beginners Olders (12-17 yrs old)",
    "Intermediate Youngers (Ages 8-11)": "Intermediate Youngers (8-11 yrs old)",
    "Advanced Youngers (Ages 8-11)": "Advanced Youngers (8-11 yrs old)",
    "Advanced Youngers/Intermediate Olders": "Advance Youngers/Intermediate Olders",
    "Advanced/Intermediate Olders (Ages 12-17)": "Advanced/Intermediate Olders (12-17 yrs old)",
    "Advanced Olders (Ages 12-17)": "Advance Olders (12-17 yrs old)",
    "Shooting/Finishing Beginners Youngers (Ages 7-11)": "Shooting/Finishing Beginners youngers(7-11 yrs old)",
    "Shooting/Finishing Intermediate Youngers (Ages 8-11)": "Shooting/Finishing Intermediate Youngers (8-11 yrs old)",
    "Shooting/Finishing Beginners Olders (Ages 12-17)": "Shooting/Finishing Beginners Older (12-17 yrs old)",
    "Shooting Intermediate/Advanced Olders (Ages 12-17)": "Shooting Intermediate/Advanced Olders (12-17 yrs old)",
    "Juniors Shooting (Ages 4-6)": "Juniors Shooting (4-6 yrs old)",
    "Mastering Defense Youngers (Ages 7-11)": "Mastering Defense Youngers (7-11 yrs old)",
    "Mastering Defense Olders (Ages 12-17)": "Mastering Defense Olders (12-17 yrs old)",
}


unified_classes = set(class_name_mapping.keys()).union(set(class_name_mapping.values()))

new_counts_aligned = [number_of_classes_offered[names_of_classes_offered.index(cls)] if cls in names_of_classes_offered else 0 for cls in unified_classes]

old_counts_aligned = [number_of_classes_offered2[names_of_classes_offered2.index(class_name_mapping[cls])] if cls in class_name_mapping and class_name_mapping[cls] in names_of_classes_offered2 else 0 for cls in unified_classes]

sorted_data = sorted(zip(unified_classes, new_counts_aligned, old_counts_aligned), key=lambda x: max(x[1], x[2]), reverse=True)
sorted_classes, sorted_new_counts, sorted_old_counts = zip(*sorted_data)
filtered_data = [(cls, new, old) for cls, new, old in zip(sorted_classes, sorted_new_counts, sorted_old_counts) if new > 0 or old > 0]

filtered_classes, filtered_new_counts, filtered_old_counts = zip(*filtered_data)

x = np.arange(len(filtered_classes))
width = 0.4

fig, ax = plt.subplots(figsize=(12, 8))
bars1 = ax.barh(x - width/2, filtered_new_counts, width, label='New Schedule', color='blue')
bars2 = ax.barh(x + width/2, filtered_old_counts, width, label='Old Schedule', color='red')
ax.set_xlabel('Number of Classes Offered')
ax.set_ylabel('Class Names')
ax.set_title('Comparison of Classes Offered (New vs Old Schedule)')
ax.set_yticks(x)
ax.set_yticklabels(filtered_classes, fontsize=8)
ax.legend()

plt.tight_layout()
plt.show()